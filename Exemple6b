/**
 * @file ex06b_2tskcont_1tskper.ino
 * @brief  2 continous tasks with same priority 
 * and a periodic task (with higher priority). 
 * First try to solve sharing problem with a safe print function
 * *FreeRTOS API reference : https://www.freertos.org/a00106.html 
 * @author philippe.camus@hepl.be from examples suite of FreeRTOS
 * @date 13/8/2021   
 */
#include <Arduino_FreeRTOS.h>

const char *pcTextForTask1 = "Task 1 is running";
const char *pcTextForTask2 = "Task 2 is running";
const char *pcTextForPeriodicTask = "Periodic task is running";

void Safe_Print_String( const char *pcString ); // safe print function - this is a function, not a task

/* The task functions. */
void vContinuousProcessingTask( void *pvParameters );
void vPeriodicTask( void *pvParameters );


// the setup function runs once when you press reset or power the board
void setup() 
{
// initialize serial communication at 9600 bits per second:
Serial.begin(9600);
 
// Create two instances of the continuous processing task, both at priority 1.
xTaskCreate( vContinuousProcessingTask, "Task 1", 200, (void*)pcTextForTask1, 1, NULL );
xTaskCreate( vContinuousProcessingTask, "Task 2", 200, (void*)pcTextForTask2, 1, NULL );

// Create one instance of the periodic task at priority 2. 
xTaskCreate( vPeriodicTask, "Task 3", 200, (void*)pcTextForPeriodicTask, 2, NULL );

 //Start the scheduler so our tasks start executing.
vTaskStartScheduler(); // not necessary in last implementation
                 // present in the initVariant() function of the Free RTOS library
}

void loop()
{
  // Empty. Things are done in Tasks.
}

/*--------------------------------------------------*/
/*---------------------- Tasks ---------------------*/
/*--------------------------------------------------*/

void vContinuousProcessingTask( void *pvParameters )
{
char *pcTaskName;

/* The string to print out is passed in via the parameter.  Cast this to a
  character pointer. */
pcTaskName = ( char * ) pvParameters;

//As always in embedded systems, this task is implemented in an infinite loop.
while(1) // continous until preemption occurs
  {
    /* Print out the name of this task.  This task just does this repeatedly
    without ever blocking or delaying. */
    Safe_Print_String( pcTaskName ); // use the safe print function
  }
}
/*-----------------------------------------------------------*/

void vPeriodicTask( void *pvParameters )
{
TickType_t xLastWakeTime;
char *pcTaskName;

 /* The string to print out is passed in via the parameter.  Cast this to a
  character pointer. */
pcTaskName = ( char * ) pvParameters;


  /* The xLastWakeTime variable needs to be initialized with the current tick
  count.  Note that this is the only time we access this variable.  From this
  point on xLastWakeTime is managed automatically by the vTaskDelayUntil()
  API function. */
xLastWakeTime = xTaskGetTickCount();

//As always in embedded systems, this task is implemented in an infinite loop.
while(1)
  {
    /* Print out the name of this task. */
     Safe_Print_String( pcTaskName ); // use the safe print function
 
    /* We want this task to execute exactly every 500 milliseconds. */
    vTaskDelayUntil( &xLastWakeTime, ( 500 / portTICK_PERIOD_MS ) );
  }
}

/*-----------------------------------------------------------*/

void Safe_Print_String( const char *pcString )
{
/* Print the string, suspending the scheduler as method of mutual
  exclusion. */
vTaskSuspendAll(); // not the best method at all. We try to do better next time
  
Serial.println(pcString);
Serial.flush(); // wait until sending buffer is empty
  
xTaskResumeAll();
}
