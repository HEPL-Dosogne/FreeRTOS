/**
 * @file ex05_2tsk_tskdelabs.ino
 * @brief 2 tasks with different priority and a delay by FreeRTOS
 * delay is absolute, it is a kind of periodic sampling rate
 * FreeRTOS API reference : https://www.freertos.org/a00106.html 
 * @author philippe.camus@hepl.be from examples suite of FreeRTOS
 * @date 12/8/2021   
 */
#include <Arduino_FreeRTOS.h>

const char pcTextForTask1[] = "Task 1 is running";
const char pcTextForTask2[] = "Task 2 is running";

/* The task functions. */
void vTask1( void *pvParameters );
void vTask2( void *pvParameters );


// the setup function runs once when you press reset or power the board
void setup() 
{
// initialize serial communication at 9600 bits per second:
Serial.begin(9600);
 
// Now set up two tasks to run independently.
// Create one of the two tasks. 
  xTaskCreate(  vTask1,   // Pointer to the function that implements the task.
    "Task 1", // Text name for the task.  This is to facilitate debugging only.
    200,      // This stack size could be adjusted by reading the Stack Highwater
    (void*)pcTextForTask1,   // Pass the text to be printed as the task parameter. 
    1,        // Priority from 0 (min) to (configMAX_PRIORITIES - 1) (max)
    NULL );   // We are not using the task handle. 
  
  /* Create the other task in exactly the same way. */
  xTaskCreate( vTask2, "Task 2", 200, (void*)pcTextForTask2, 2, NULL ); 

//Start the scheduler so our tasks start executing.
vTaskStartScheduler(); // not necessary in last implementation
                 // present in the initVariant() function of the Free RTOS library
}

void loop()
{
  // Empty. Things are done in Tasks.
}

/*--------------------------------------------------*/
/*---------------------- Tasks ---------------------*/
/*--------------------------------------------------*/

void vTask1( void *pvParameters )
{
const char *pcTaskName;
TickType_t xLastWakeTime;

 /* The string to print out is passed in via the parameter.  Cast this to a
  character pointer. */
pcTaskName = ( char * ) pvParameters;

   /* The xLastWakeTime variable needs to be initialized with the current tick
  count.  Note that this is the only time we access this variable.  From this
  point on xLastWakeTime is managed automatically by the vTaskDelayUntil()
  API function. */
xLastWakeTime = xTaskGetTickCount();
  
//As always in embedded systems, this task is implemented in an infinite loop. 
while(1)
  {
    /* Print out the name of this task. */
    Serial.println( pcTaskName );
 
    /* We want this task to execute exactly every 1000 milliseconds.  As per
    the vTaskDelay() function, time is measured in ticks, and the
    portTICK_PERIOD_MS constant is used to convert this to milliseconds.
    xLastWakeTime is automatically updated within vTaskDelayUntil() so does not
    have to be updated by this task code. */
    
    vTaskDelayUntil( &xLastWakeTime, ( 1000 / portTICK_PERIOD_MS ) ); 
    //  you have to give the address of xLastWakeTime
  }
}


void vTask2( void *pvParameters )
{
const char *pcTaskName;
TickType_t xLastWakeTime;

 /* The string to print out is passed in via the parameter.  Cast this to a
  character pointer. */
pcTaskName = ( char * ) pvParameters;

   /* The xLastWakeTime variable needs to be initialized with the current tick
  count.  Note that this is the only time we access this variable.  From this
  point on, xLastWakeTime is managed automatically by the vTaskDelayUntil()
  API function. */
xLastWakeTime = xTaskGetTickCount();
  
//As always in embedded systems, this task is implemented in an infinite loop.
while(1)
  {
    /* Print out the name of this task. */
    Serial.println( pcTaskName );
 
    /* We want this task to execute exactly every 1000 milliseconds.  As per
    the vTaskDelay() function, time is measured in ticks, and the
    portTICK_PERIOD_MS constant is used to convert this to milliseconds.
    xLastWakeTime is automatically updated within vTaskDelayUntil() so does not
    have to be updated by this task code. */
    
    vTaskDelayUntil( &xLastWakeTime, ( 1000 / portTICK_PERIOD_MS ) ); 
    // you have to give the address of xLastWakeTime
  }
}
