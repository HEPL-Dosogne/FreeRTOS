/**
 * @file ex14_saveprint_gatekeeper.ino
 * @brief safe Serial.print using a gatekeeper task - solving rentrancy issue
 * Only the gate keeper task is allowed to access shared ressource.
 * Gate keeper task is a background task, so its priority is low.
 * A queue is used to receive data from two other tasks.
 * FreeRTOS API reference : https://www.freertos.org/a00106.html 
 * @author philippe.camus@hepl.be from examples suite of FreeRTOS
 * @date 4/11/2019   
 */
#include <Arduino_FreeRTOS.h>
#include <queue.h>

/* The task that sends messages to the stdio gatekeeper.  Two instances of this
task will be created. */
static void prvPrintTask( void *pvParameters );

/* The gatekeeper task. */
static void prvStdioGatekeeperTask( void *pvParameters );

/*-----------------------------------------------------------*/

/* Declare a variable of type QueueHandle_t.  This is used to send messages from
the print tasks to the gatekeeper task. */
QueueHandle_t xPrintQueue;


// the setup function runs once when you press reset or power the board
void setup() {

  // initialize serial communication at 9600 bits per second:
  Serial.begin(9600);

     /* Before a queue is used it must be explicitly created.  The queue is created
  to hold a maximum of 5 character pointers. */
    xPrintQueue = xQueueCreate( 5, sizeof( char * ) );

  /* The tasks are going to use a pseudo random delay, 
   *  the generator is seeded here. */
  srand( 678 );

  /* Check the queue was created successfully. */
  if( xPrintQueue != NULL )
  {
    /* Create two instances of the tasks that send messages to the gatekeeper.
    The string they attempt to write is passed in as the task parameter.
    The tasks are created at     different priorities so some pre-emption will occur. */
    xTaskCreate( prvPrintTask, "Print1", 200, (void*)"Task 1 *****", 1, NULL );
    xTaskCreate( prvPrintTask, "Print2", 200, (void*)"Task 2 -----", 2, NULL );

   
    /* Create the gatekeeper task.  This is the only task that is permitted
    to access standard out. Its priority i slow to allow other tasks to run*/
    xTaskCreate( prvStdioGatekeeperTask, "Gatekeeper", 200, NULL, 0, NULL );
  }
  //Start the scheduler so our tasks start executing.
  vTaskStartScheduler(); // not necessary in last implementation
                 // present in the initVariant() function of the Free RTOS library
}

void loop()
{
  // Empty. Things are done in Tasks.
}

/*--------------------------------------------------*/
/*---------------------- Tasks ---------------------*/
/*--------------------------------------------------*/

static void prvStdioGatekeeperTask( void *pvParameters )
{
char *pcMessageToPrint;

  /* This is the only task that is allowed to write to the terminal output.
  Any other task wanting to write to the output does not access the terminal
  directly, but instead sends the output to this task.  As only one task
  writes to standard out there are no mutual exclusion or serialization issues
  to consider within this task itself. */
while(1)
  {
    /* Wait for a message to arrive. */
    xQueueReceive( xPrintQueue, (char *) &pcMessageToPrint, portMAX_DELAY );

    /* There is no need to check the return value as the task will block
    indefinitely and only run again when a message has arrived.  When the
    next line is executed there will be a message to be output. */
    Serial.println(pcMessageToPrint );
    Serial.flush();
  /* Now simply go back to wait for the next message. */
  }
}
/*-----------------------------------------------------------*/
 
static void prvPrintTask( void *pvParameters )
{
char *pcStringToPrint;
  
/* Two instances of this task are created so the string the task will send
  to prvNewPrintString() is passed in the task parameter.  Cast this to the
  required type. */
pcStringToPrint = ( char * ) pvParameters;

while(1)
  {
    /* Print out the string, not directly but by passing the string to the
    gatekeeper task on the queue.  The queue is created before the scheduler is
    started so will already exist by the time this task executes.  A block time
    is not specified as there should always be space in the queue. */
    xQueueSendToBack( xPrintQueue, (void *) &pcStringToPrint, 0 );

    /* Wait a pseudo random time.  Note that rand() is not necessarily
    re-entrant, but in this case it does not really matter as the code does
    not care what value is returned.  In a more secure application a version
    of rand() that is known to be re-entrant should be used - or calls to
    rand() should be protected using a critical section. */
    vTaskDelay( ( rand() & 0x1FF ) );
  }
}
